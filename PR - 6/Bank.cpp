// WARNING: this code might not run in DEV C++, because of software issue in DEV C++,
// Solution: Use other IDE: VSCode, CLion or online Compiler 

#include <iostream>
#include <fstream>
#include <sstream> // for extracting stem(integar) from string
#include <string> // for using to_string()
using namespace std;
class server{
    
    private:
        string username = "Admin";
        string password = "Admin"; // default username and password
        string txtExtension = ".txt";
        
        void write(string holder, long int accNo, double bal){
            // fstream serverDatabase;
            string filename = to_string(accNo) + txtExtension; // Create a file named with acc number
            ofstream DatabaseFile(filename);
            DatabaseFile << "Account Holder: " << holder << "\n";
            DatabaseFile << "Account No.: " << accNo << "\n";
            DatabaseFile << "Account Balance: " << bal << "\n";
        }


    public:
    int accountCount = 0; // to start counting from 0 (used in index)

        int createAccount(){
            long int accNo; // if user gives long account no. 
            double accBalance;
            string accHolder;

            cout << "Enter Account Holder Name (Without Spaces): "; // spaces in string will crash the program (infinite loop)
            cin >> accHolder;
            cout << "Enter Account No.: ";
            cin >> accNo;
            cout << "Enter Account balance: ";
            cin >> accBalance;


            accountCount++; // number used while deleting all database files

            write(accHolder, accNo, accBalance);

            return accNo;
        }


        void getInfo(long int accNo){
            string InfoPrinter;
            // ifstream serverDatabase;
            ifstream in(to_string(accNo) + ".txt");
            // cout<<getline(in, InfoPrinter);
            getline(in, InfoPrinter);
            cout<<endl<<"------------------------------------------"<<endl;
            cout<<InfoPrinter<<endl;
            getline(in, InfoPrinter);
            cout<<InfoPrinter<<endl;
            getline(in, InfoPrinter);
            cout<<InfoPrinter;
            cout<<"\n------------------------------------------\n\n";
        }


        void destroyAccountData(int AccNo[]){
            cout<<"------------------------------\n          Destroying\n------------------------------";
            string filename;
            for(int i=0; i<=accountCount; i++){
                filename = to_string(AccNo[i]) + ".txt"; 
                remove(filename.c_str()); // remove file with the name of account number
            }
        }


        int adminCredentailCheck(){
           string user, pass;
            cout << "Enter Admin Username: ";
            cin >> user;
            cout << "Enter Admin Password: ";
            cin >> pass;
            if (user == username && pass == password){
                return 1; // return 1 if login successful
            }
            else{
                return 0; // return 0 if login failed
            }
        }


        int checkAccountExistence(long int accNo){
            string fileName = to_string(accNo) + txtExtension; 
            ifstream infile(fileName);
            return infile.good();
        }


        int depositMoney(long int accNo, long int amount){
            string fileName = to_string(accNo) + txtExtension; 
            string holderLine, accNoLine, balanceLine;
            ifstream infile(fileName);
            
            if(!infile.is_open()) {
                cout << "Cannot open file\n";
                return 0;
            }

            getline(infile, holderLine);
            getline(infile, accNoLine);
            getline(infile, balanceLine);
            
            cout << holderLine << endl;
            cout << accNoLine << endl;
            cout << balanceLine << endl;

                // this section is being generated by AI (whn i tried the extracted balance value was '1.56176e+231' )
                        string balancePrefix = "Account Balance: "; // added by me (AI tried made this trash)
                        size_t pos = balanceLine.find(balancePrefix);
                        if(pos == string::npos) return 0;
                        
                        string balanceStr = balanceLine.substr(pos + balancePrefix.length());
                        double currentBalance;
                        try {
                            currentBalance = stod(balanceStr);
                        } catch(const exception& e) {
                            return 0;
                        }
                        
                        currentBalance += amount; // edited by me (ai tried to involve here)
                        
                        ofstream outfile(fileName);
                        if(!outfile.is_open()) return 0;
                        
                        outfile << holderLine << "\n";
                        outfile << accNoLine << "\n";
                        outfile << "Account Balance: " << currentBalance << "\n";
                        
                        infile.close();
                        outfile.close();
                        return 1;

                // code ended here (AI generated)
        }
        int withdrawMoney(long int accNo, long int amount){
            string fileName = to_string(accNo) + txtExtension; 
            string holderLine, accNoLine, balanceLine;
            ifstream infile(fileName);
            
            if(!infile.is_open()) {
                cout << "Cannot open file\n";
                return 0;
            }

            getline(infile, holderLine);
            getline(infile, accNoLine);
            getline(infile, balanceLine);
            
            cout << holderLine << endl;
            cout << accNoLine << endl;
            cout << balanceLine << endl;

                // this section is being generated by AI (whn i tried the extracted balance value was '1.56176e+231' )
                        string balancePrefix = "Account Balance: "; // added by me (AI tried made this trash)
                        size_t pos = balanceLine.find(balancePrefix);
                        if(pos == string::npos) return 0;
                        
                        string balanceStr = balanceLine.substr(pos + balancePrefix.length());
                        double currentBalance;
                        try {
                            currentBalance = stod(balanceStr);
                        } catch(const exception& e) {
                            return 0;
                        }
                        
                        if(currentBalance >= amount){
                            currentBalance = currentBalance - amount;
                        }
                        else{
                            cout << "Insufficient balance to withdraw the amount.\n";
                        }


                        ofstream outfile(fileName);
                        if(!outfile.is_open()) return 0;
                        
                        outfile << holderLine << "\n";
                        outfile << accNoLine << "\n";
                        outfile << "Account Balance: " << currentBalance << "\n";
                        
                        infile.close();
                        outfile.close();
                        return 1;

                // code ended here (AI generated)
        }

};



int main(){
    server s;
    int allAccNo[50];
    int action;
    long int accNo, amount;
    while (1){
        // fstream serverDatabase;
        // serverDatabase.open("serverDatabase.txt", ios::out);
        cout << "1. Create Account\n2. Account Info\n3. Deposit Money\n4. Withdraw Money\n0 (or CTRL + C). Exit\nEnter Your Choice: ";
        cin >> action;
            if (action == 0){
                cout<<"------ Do you want to Delete All Userdata and Accounts Made (During this Session Only)? ------\n";
                cout<<"'y' - Yes OR 'n' - No \n";
                char DeleteConfirmation;
                cin>>DeleteConfirmation;
                if ( DeleteConfirmation == 'y' || DeleteConfirmation == 'Y'){

                    // s.adminCredentailCheck();
                    if(s.adminCredentailCheck() == 0) cout<<"Wrong username or password";
                    else{
                        for(int i = 0; i <= s.accountCount; i++){
                            cout << "Account No. " << allAccNo[i] << " is being destroyed.\n";
                        }
                        s.destroyAccountData(allAccNo);
                    }
                    return 0;
                }
                else if(DeleteConfirmation == 'n' || DeleteConfirmation == 'N') return 0;
                else cout<<"\n------------------------------\n        Invalid Input\n------------------------------\n\n";

        }
        else{
            switch (action){
            case 1:
                allAccNo[s.accountCount] = s.createAccount(); // calling function inside a assigning value, to store in array, used when destroying filw
                break;
            case 2:
                cout<<"Enter Account No.: ";
                cin>>accNo;
                s.getInfo(accNo);
                break;
            case 3:
                cout<<"Enter Account No.:";
                cin>>accNo;
                if(s.checkAccountExistence(accNo) == 0){
                    cout << "Account does not exist. Please check the account number.\n";
                }
                else{
                    cout<<"Enter Amount to Deposit: ";
                    cin>>amount;
                    cout << "\n--- Depositing Money ---\n\n";
                    s.depositMoney(accNo, amount);
                    cout << "\n--- Money Deposited ---\n\n";
                }
                break;
            case 4:
                cout<<"Enter Account No.:";
                cin>>accNo;
                if(s.checkAccountExistence(accNo) == 0){
                    cout << "Account does not exist. Please check the account number.\n";
                }
                else{
                    cout<<"Enter Amount to Withdraw: ";
                    cin>>amount;
                    cout << "\n--- Withdrawing Money ---\n\n";
                    s.withdrawMoney(accNo, amount);
                    cout << "\n--- Money withdrawed ---\n\n";
                }
                break;
            default:
                cout << "\n--- Invalid Choice, Try Again ---\n\n";
                break;
            } // switch
        } // else
    } // while(infinite)
} // main
